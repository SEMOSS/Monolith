image: maven:3.5-jdk-8

stages:
  - build_semoss
  - build_monolith
  
variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "-s ./settings.xml --batch-mode"
  # Used for triggering SEMOSS pipeline
  IMAGE: "registry.gitlab.com/finestructure/pipeline-trigger"
  URL: "repo.semoss.org"
  
cache:
  paths:
    - .m2/repository/
  key: ${CI_BUILD_REF_NAME}
  
build_semoss:
  stage: build_semoss
  except:
    variables:
      - $RELEASE == "TRUE"
  image: $IMAGE
  script:
    - date +%s
    # Set via secret variables in SEMOSS group
    - trigger -h $URL -a $API_TOKEN -p $SEMOSS_PIPELINE_TOKEN -t $SEMOSS_TARGET_BRANCH $SEMOSS_PROJECT_ID
    - date +%s
  
# Does not push to maven central
build_monolith_dev:
  stage: build_monolith
  # See https://docs.gitlab.com/ee/ci/yaml/#only-and-except-simplified
  only:
    refs:
      - pushes
  except:
    variables:
      - $RELEASE == "TRUE"
  script:
    - apt-get update
    - apt-get install -y openjfx
    # So that the most up-to-date artifacts are pulled
    - rm -rf .m2/repository/org/semoss
    - mvn $MAVEN_CLI_OPTS clean install -Dci.version=${VERSION}-SNAPSHOT
    # So that the cache takes up less space
    - rm -rf .m2/repository/org/semoss
  artifacts:
    paths:
      - target/monolith-${VERSION}-SNAPSHOT.war

# Does not push to maven central
# Pushes to sonar
build_monolith_sonar:
  stage: build_monolith
  # See https://docs.gitlab.com/ee/ci/yaml/#only-and-except-simplified
  only:
    refs:
      - schedules
  except:
    variables:
      - $RELEASE == "TRUE"
  script:
    - apt-get update
    - apt-get install -y openjfx
    # So that the most up-to-date artifacts are pulled
    - rm -rf .m2/repository/org/semoss
    - mvn $MAVEN_CLI_OPTS clean install -Dci.version=${VERSION}-SNAPSHOT
    - mvn sonar:sonar -Dsonar.projectKey=$PROJECT_KEY -Dsonar.projectVersion=${VERSION}-SNAPSHOT -Dsonar.host.url=$HOST_URL -Dsonar.login=$LOGIN_KEY
    # So that the cache takes up less space
    - rm -rf .m2/repository/org/semoss
  artifacts:
    paths:
      - target/monolith-${VERSION}-SNAPSHOT.war
      - target/sonar


# Pushes to maven central
build_monolith_deploy:
  stage: build_monolith
  only:
    refs:
      - triggers
      - web
  except:
    variables:
      - $RELEASE == "TRUE"
  script:
    - apt-get update
    - apt-get install -y openjfx
    - apt-get install -y gnupg2
    - gpg2 --batch --import <(echo "$GPG_PRIVATE_KEY")
    # So that the most up-to-date artifacts are pulled
    - rm -rf .m2/repository/org/semoss
    - mvn $MAVEN_CLI_OPTS deploy -P deploy -Dci.version=${VERSION}-SNAPSHOT
    # So that the cache takes up less space
    - rm -rf .m2/repository/org/semoss
  artifacts:
    paths:
      - target/monolith-${VERSION}-SNAPSHOT.war
      - target/monolith-${VERSION}-SNAPSHOT-libraries.tar.gz

# Releases to maven central
build_monolith_release:
  stage: build_monolith
  # Only release if explicitly triggered on web and the RELEASE variable is set to TRUE
  only:
    refs:
      - web
    variables:
      - $RELEASE == "TRUE"
  script:
    - apt-get update
    - apt-get install -y openjfx
    - apt-get install -y gnupg2
    - gpg2 --batch --import <(echo "$GPG_PRIVATE_KEY")
    # So that the most up-to-date artifacts are pulled
    - rm -rf .m2/repository/org/semoss
    - mvn $MAVEN_CLI_OPTS deploy -P deploy -Dci.version=${VERSION}
    # So that the cache takes up less space
    - rm -rf .m2/repository/org/semoss
  artifacts:
    paths:
      - target/monolith-${VERSION}.war
      - target/monolith-${VERSION}-libraries.tar.gz